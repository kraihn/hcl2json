name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
    - name: Build
      run: cargo build --verbose
    - name: Build release
      run: cargo build --release --verbose
    - name: Summary
      run: |
        echo "## ðŸ”¨ Build Results" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Debug build successful" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Release build successful" >> $GITHUB_STEP_SUMMARY

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
    - name: Run tests
      run: |
        cargo test --verbose 2>&1 | tee test_output.txt
        echo "TEST_COUNT=$(grep -o 'test result: ok\. [0-9]* passed' test_output.txt | grep -o '[0-9]*' | awk '{sum += $1} END {print sum}')" >> $GITHUB_ENV
    - name: Summary
      run: |
        echo "## ðŸ§ª Test Results" >> $GITHUB_STEP_SUMMARY
        echo "âœ… All $TEST_COUNT tests passed" >> $GITHUB_STEP_SUMMARY

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - uses: Swatinem/rust-cache@v2
    - name: Run clippy
      run: cargo clippy -- -D warnings
    - name: Summary
      run: |
        echo "## ðŸ“Ž Clippy Results" >> $GITHUB_STEP_SUMMARY
        echo "âœ… No linting warnings found" >> $GITHUB_STEP_SUMMARY

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - name: Check formatting
      run: cargo fmt --all -- --check
    - name: Summary
      run: |
        echo "## ðŸŽ¨ Format Results" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Code formatting is correct" >> $GITHUB_STEP_SUMMARY

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    - name: Generate coverage
      run: |
        cargo tarpaulin --verbose --all-targets --workspace --timeout 120 --follow-exec --out xml 2>&1 | tee coverage_output.txt
        echo "=== DEBUG: Coverage output file ==="
        cat coverage_output.txt
        echo "=== DEBUG: Searching for coverage pattern ==="
        grep -o '[0-9]*\.[0-9]*% coverage' coverage_output.txt || echo "Pattern not found"
        echo "=== DEBUG: All percentage patterns ==="
        grep -E '[0-9]+\.[0-9]+%' coverage_output.txt || echo "No percentages found"
        COVERAGE=$(grep -o '[0-9]*\.[0-9]*% coverage' coverage_output.txt | head -1 | grep -o '[0-9]*\.[0-9]*')
        echo "COVERAGE_PERCENT=$COVERAGE" >> $GITHUB_ENV
        echo "DEBUG: COVERAGE_PERCENT=$COVERAGE"
    - name: Summary
      run: |
        echo "## ðŸ“Š Coverage Results" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Code coverage: $COVERAGE_PERCENT%" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“‹ Coverage report generated locally" >> $GITHUB_STEP_SUMMARY
